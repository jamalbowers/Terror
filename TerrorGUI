local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local camera = workspace.CurrentCamera
local localPlayer = Players.LocalPlayer

-- SETTINGS (default values)
local aimAssistEnabled = true
local xSmoothness = 1
local ySmoothness = 0.2
local XOffset = 1
local YOffset = 0
local xOffsetSmoothness = 0.2
local yOffsetSmoothness = 0.2
local maxJumpDistance = 1000
local enablePrediction = true
local predictionFactor = 0.15
local tpSmoothness = 0.2

-- Runtime State
local holdingRightClick = false
local lockedTarget = nil
local currentXOffset = 0
local currentYOffset = 0
local keysDown = { A = false, D = false }

-- GUI Creation
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "AimAssistGUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = game.CoreGui

local frame = Instance.new("Frame", screenGui)
frame.Position = UDim2.new(-0.3, 0, 0.3, 0)
frame.Size = UDim2.new(0, 500, 0, 700)
frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
frame.BorderSizePixel = 0

local uiList = Instance.new("UIListLayout", frame)
uiList.Padding = UDim.new(0, 6)
uiList.FillDirection = Enum.FillDirection.Vertical
uiList.HorizontalAlignment = Enum.HorizontalAlignment.Center
uiList.VerticalAlignment = Enum.VerticalAlignment.Top

-- GUI Toggle + Animation
local guiOpen = false
local openPos = UDim2.new(0.05, 0, 0.3, 0)
local closedPos = UDim2.new(-0.3, 0, 0.3, 0)
local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

local function toggleGui()
    guiOpen = not guiOpen
    local goal = { Position = guiOpen and openPos or closedPos }
    TweenService:Create(frame, tweenInfo, goal):Play()
end

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.RightControl then
        toggleGui()
    end
end)

-- UTILS
local function createToggle(name, state, callback)
    local btn = Instance.new("TextButton", frame)
    btn.Size = UDim2.new(0.9, 0, 0, 40)
    btn.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    btn.TextColor3 = Color3.new(1, 1, 1)
    btn.Text = name .. ": " .. tostring(state)
    btn.Font = Enum.Font.SourceSans
    btn.TextSize = 20

    btn.MouseButton1Click:Connect(function()
        state = not state
        btn.Text = name .. ": " .. tostring(state)
        callback(state)
    end)
end

local function createSlider(name, min, max, value, callback)
    local container = Instance.new("Frame", frame)
    container.Size = UDim2.new(0.9, 0, 0, 50)
    container.BackgroundTransparency = 1

    local label = Instance.new("TextLabel", container)
    label.Size = UDim2.new(1, 0, 0.4, 0)
    label.Position = UDim2.new(0, 0, 0, 0)
    label.Text = name .. ": " .. value
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextSize = 18
    label.BackgroundTransparency = 1
    label.TextXAlignment = Enum.TextXAlignment.Left

    local bar = Instance.new("Frame", container)
    bar.Size = UDim2.new(1, 0, 0.4, 0)
    bar.Position = UDim2.new(0, 0, 0.6, 0)
    bar.BackgroundColor3 = Color3.fromRGB(50, 50, 50)

    local fill = Instance.new("Frame", bar)
    fill.BackgroundColor3 = Color3.new(1, 1, 1)
    fill.Size = UDim2.new((value - min) / (max - min), 0, 1, 0)
    fill.BorderSizePixel = 0

    local dragging = false
    bar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)

    bar.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    RunService.RenderStepped:Connect(function()
        if dragging then
            local mouse = UserInputService:GetMouseLocation().X
            local absPos = bar.AbsolutePosition.X
            local absSize = bar.AbsoluteSize.X
            local percent = math.clamp((mouse - absPos) / absSize, 0, 1)
            local newVal = math.floor(((min + (max - min) * percent) * 1000)) / 1000

            fill.Size = UDim2.new(percent, 0, 1, 0)
            label.Text = name .. ": " .. tostring(newVal)
            callback(newVal)
        end
    end)
end

-- GUI SETTINGS
createToggle("Aim Assist", aimAssistEnabled, function(v) aimAssistEnabled = v end)
createToggle("Prediction", enablePrediction, function(v) enablePrediction = v end)
createSlider("X Smoothness", 0, 1, xSmoothness, function(v) xSmoothness = v end)
createSlider("Y Smoothness", 0, 1, ySmoothness, function(v) ySmoothness = v end)
createSlider("XOffset", -5, 5, XOffset, function(v) XOffset = v end)
createSlider("YOffset", -5, 5, YOffset, function(v) YOffset = v end)
createSlider("XOffset Smooth", 0, 1, xOffsetSmoothness, function(v) xOffsetSmoothness = v end)
createSlider("YOffset Smooth", 0, 1, yOffsetSmoothness, function(v) yOffsetSmoothness = v end)
createSlider("TP Smooth", 0, 1, tpSmoothness, function(v) tpSmoothness = v end)
createSlider("Prediction Factor", 0, 1, predictionFactor, function(v) predictionFactor = v end)

-- Input Logic
UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.A then keysDown.A = true end
    if input.KeyCode == Enum.KeyCode.D then keysDown.D = true end

    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        holdingRightClick = true

        local closest, shortest = nil, math.huge
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= localPlayer and player.Character and player.Character:FindFirstChild("Head") then
                local head = player.Character.Head
                local screenPos, visible = camera:WorldToViewportPoint(head.Position)
                if visible then
                    local distX = math.abs(screenPos.X - camera.ViewportSize.X / 2)
                    if distX < shortest then
                        shortest = distX
                        closest = player
                    end
                end
            end
        end

        lockedTarget = closest
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.A then keysDown.A = false end
    if input.KeyCode == Enum.KeyCode.D then keysDown.D = false end
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        holdingRightClick = false
        lockedTarget = nil
    end
end)

-- Airshot Part
local airshotPart = Instance.new("Part")
airshotPart.Size = Vector3.new(1, 1, 1)
airshotPart.Anchored = true
airshotPart.CanCollide = false
airshotPart.Transparency = 1
airshotPart.Name = "AirshotPart"
airshotPart.Parent = workspace

-- AIM SYSTEM
RunService.RenderStepped:Connect(function()
    if not (aimAssistEnabled and holdingRightClick and lockedTarget) then return end

    local targetChar = lockedTarget.Character
    local localChar = localPlayer.Character
    if not (targetChar and targetChar:FindFirstChild("Head") and localChar and localChar:FindFirstChild("HumanoidRootPart")) then return end

    local targetHead = targetChar.Head
    local targetRoot = targetChar:FindFirstChild("HumanoidRootPart")
    local targetHumanoid = targetChar:FindFirstChildOfClass("Humanoid")
    if not (targetRoot and targetHumanoid) then return end

    local camPos = camera.CFrame.Position
    local targetPosition = targetHead.Position

    -- Apply prediction
    if enablePrediction then
        targetPosition += targetRoot.Velocity * predictionFactor
    end

    -- Apply offsets
    local targetXOffset = 0
    if keysDown.D then targetXOffset = XOffset end
    if keysDown.A then targetXOffset = -XOffset end
    currentXOffset = currentXOffset + (targetXOffset - currentXOffset) * xOffsetSmoothness
    targetPosition += localChar.HumanoidRootPart.CFrame.RightVector * currentXOffset

    local targetYOffset = 0
    if keysDown.D then targetYOffset = YOffset end
    if keysDown.A then targetYOffset = -YOffset end
    currentYOffset = currentYOffset + (targetYOffset - currentYOffset) * yOffsetSmoothness
    targetPosition += localChar.HumanoidRootPart.CFrame.UpVector * currentYOffset

    if targetHumanoid:GetState() == Enum.HumanoidStateType.Freefall then
        -- Tween airshot part to target head
        TweenService:Create(airshotPart, TweenInfo.new(tpSmoothness), {Position = targetHead.Position}):Play()
        -- Snap camera to airshot part
        local newLook = camera.CFrame.LookVector:Lerp((airshotPart.Position - camPos).Unit, 1 - tpSmoothness)
        camera.CFrame = CFrame.new(camPos, camPos + newLook)
    else
        -- Smooth aiming normally
        local dir = (targetPosition - camPos).Unit
        local currentLook = camera.CFrame.LookVector
        local newLook = Vector3.new(
            currentLook.X + (dir.X - currentLook.X) * xSmoothness,
            currentLook.Y + (dir.Y - currentLook.Y) * ySmoothness,
            currentLook.Z + (dir.Z - currentLook.Z) * xSmoothness
        )
        camera.CFrame = CFrame.new(camPos, camPos + newLook)
    end
end)
